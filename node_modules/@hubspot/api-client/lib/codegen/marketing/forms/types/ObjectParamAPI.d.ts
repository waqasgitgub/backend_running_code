import { Configuration } from '../configuration';
import { CollectionResponseFormDefinitionBaseForwardPaging } from '../models/CollectionResponseFormDefinitionBaseForwardPaging';
import { FormDefinitionBase } from '../models/FormDefinitionBase';
import { FormDefinitionCreateRequestBase } from '../models/FormDefinitionCreateRequestBase';
import { HubSpotFormDefinition } from '../models/HubSpotFormDefinition';
import { HubSpotFormDefinitionPatchRequest } from '../models/HubSpotFormDefinitionPatchRequest';
import { FormsApiRequestFactory, FormsApiResponseProcessor } from "../apis/FormsApi";
export interface FormsApiArchiveRequest {
    formId: string;
}
export interface FormsApiCreateRequest {
    formDefinitionCreateRequestBase: FormDefinitionCreateRequestBase;
}
export interface FormsApiGetByIdRequest {
    formId: string;
    archived?: boolean;
}
export interface FormsApiGetPageRequest {
    after?: string;
    limit?: number;
    archived?: boolean;
    formTypes?: Array<'hubspot' | 'captured' | 'flow' | 'blog_comment' | 'all'>;
}
export interface FormsApiReplaceRequest {
    formId: string;
    hubSpotFormDefinition: HubSpotFormDefinition;
}
export interface FormsApiUpdateRequest {
    formId: string;
    hubSpotFormDefinitionPatchRequest: HubSpotFormDefinitionPatchRequest;
}
export declare class ObjectFormsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: FormsApiRequestFactory, responseProcessor?: FormsApiResponseProcessor);
    archive(param: FormsApiArchiveRequest, options?: Configuration): Promise<void>;
    create(param: FormsApiCreateRequest, options?: Configuration): Promise<FormDefinitionBase>;
    getById(param: FormsApiGetByIdRequest, options?: Configuration): Promise<FormDefinitionBase>;
    getPage(param?: FormsApiGetPageRequest, options?: Configuration): Promise<CollectionResponseFormDefinitionBaseForwardPaging>;
    replace(param: FormsApiReplaceRequest, options?: Configuration): Promise<FormDefinitionBase>;
    update(param: FormsApiUpdateRequest, options?: Configuration): Promise<FormDefinitionBase>;
}
