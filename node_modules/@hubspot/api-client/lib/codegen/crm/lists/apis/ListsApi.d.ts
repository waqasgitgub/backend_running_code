import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ListCreateRequest } from '../models/ListCreateRequest';
import { ListCreateResponse } from '../models/ListCreateResponse';
import { ListFetchResponse } from '../models/ListFetchResponse';
import { ListFilterUpdateRequest } from '../models/ListFilterUpdateRequest';
import { ListSearchRequest } from '../models/ListSearchRequest';
import { ListSearchResponse } from '../models/ListSearchResponse';
import { ListUpdateResponse } from '../models/ListUpdateResponse';
import { ListsByIdResponse } from '../models/ListsByIdResponse';
export declare class ListsApiRequestFactory extends BaseAPIRequestFactory {
    create(listCreateRequest: ListCreateRequest, _options?: Configuration): Promise<RequestContext>;
    doSearch(listSearchRequest: ListSearchRequest, _options?: Configuration): Promise<RequestContext>;
    getAll(listIds?: Array<number>, includeFilters?: boolean, _options?: Configuration): Promise<RequestContext>;
    getById(listId: number, includeFilters?: boolean, _options?: Configuration): Promise<RequestContext>;
    getByName(listName: string, objectTypeId: string, includeFilters?: boolean, _options?: Configuration): Promise<RequestContext>;
    remove(listId: number, _options?: Configuration): Promise<RequestContext>;
    restore(listId: number, _options?: Configuration): Promise<RequestContext>;
    updateListFilters(listId: number, listFilterUpdateRequest: ListFilterUpdateRequest, enrollObjectsInWorkflows?: boolean, _options?: Configuration): Promise<RequestContext>;
    updateName(listId: number, listName?: string, includeFilters?: boolean, _options?: Configuration): Promise<RequestContext>;
}
export declare class ListsApiResponseProcessor {
    create(response: ResponseContext): Promise<ListCreateResponse>;
    doSearch(response: ResponseContext): Promise<ListSearchResponse>;
    getAll(response: ResponseContext): Promise<ListsByIdResponse>;
    getById(response: ResponseContext): Promise<ListFetchResponse>;
    getByName(response: ResponseContext): Promise<ListFetchResponse>;
    remove(response: ResponseContext): Promise<void>;
    restore(response: ResponseContext): Promise<void>;
    updateListFilters(response: ResponseContext): Promise<ListUpdateResponse>;
    updateName(response: ResponseContext): Promise<ListUpdateResponse>;
}
