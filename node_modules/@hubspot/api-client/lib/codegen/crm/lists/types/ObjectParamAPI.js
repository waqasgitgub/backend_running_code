"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectMembershipsApi = exports.ObjectListsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectListsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableListsApi(configuration, requestFactory, responseProcessor);
    }
    create(param, options) {
        return this.api.create(param.listCreateRequest, options).toPromise();
    }
    doSearch(param, options) {
        return this.api.doSearch(param.listSearchRequest, options).toPromise();
    }
    getAll(param = {}, options) {
        return this.api.getAll(param.listIds, param.includeFilters, options).toPromise();
    }
    getById(param, options) {
        return this.api.getById(param.listId, param.includeFilters, options).toPromise();
    }
    getByName(param, options) {
        return this.api.getByName(param.listName, param.objectTypeId, param.includeFilters, options).toPromise();
    }
    remove(param, options) {
        return this.api.remove(param.listId, options).toPromise();
    }
    restore(param, options) {
        return this.api.restore(param.listId, options).toPromise();
    }
    updateListFilters(param, options) {
        return this.api.updateListFilters(param.listId, param.listFilterUpdateRequest, param.enrollObjectsInWorkflows, options).toPromise();
    }
    updateName(param, options) {
        return this.api.updateName(param.listId, param.listName, param.includeFilters, options).toPromise();
    }
}
exports.ObjectListsApi = ObjectListsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectMembershipsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableMembershipsApi(configuration, requestFactory, responseProcessor);
    }
    add(param, options) {
        return this.api.add(param.listId, param.requestBody, options).toPromise();
    }
    addAllFromList(param, options) {
        return this.api.addAllFromList(param.listId, param.sourceListId, options).toPromise();
    }
    addAndRemove(param, options) {
        return this.api.addAndRemove(param.listId, param.membershipChangeRequest, options).toPromise();
    }
    getPage(param, options) {
        return this.api.getPage(param.listId, param.after, param.before, param.limit, options).toPromise();
    }
    remove(param, options) {
        return this.api.remove(param.listId, param.requestBody, options).toPromise();
    }
    removeAll(param, options) {
        return this.api.removeAll(param.listId, options).toPromise();
    }
}
exports.ObjectMembershipsApi = ObjectMembershipsApi;
//# sourceMappingURL=ObjectParamAPI.js.map