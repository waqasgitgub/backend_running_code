"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseMembershipsApi = exports.PromiseListsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseListsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableListsApi(configuration, requestFactory, responseProcessor);
    }
    create(listCreateRequest, _options) {
        const result = this.api.create(listCreateRequest, _options);
        return result.toPromise();
    }
    doSearch(listSearchRequest, _options) {
        const result = this.api.doSearch(listSearchRequest, _options);
        return result.toPromise();
    }
    getAll(listIds, includeFilters, _options) {
        const result = this.api.getAll(listIds, includeFilters, _options);
        return result.toPromise();
    }
    getById(listId, includeFilters, _options) {
        const result = this.api.getById(listId, includeFilters, _options);
        return result.toPromise();
    }
    getByName(listName, objectTypeId, includeFilters, _options) {
        const result = this.api.getByName(listName, objectTypeId, includeFilters, _options);
        return result.toPromise();
    }
    remove(listId, _options) {
        const result = this.api.remove(listId, _options);
        return result.toPromise();
    }
    restore(listId, _options) {
        const result = this.api.restore(listId, _options);
        return result.toPromise();
    }
    updateListFilters(listId, listFilterUpdateRequest, enrollObjectsInWorkflows, _options) {
        const result = this.api.updateListFilters(listId, listFilterUpdateRequest, enrollObjectsInWorkflows, _options);
        return result.toPromise();
    }
    updateName(listId, listName, includeFilters, _options) {
        const result = this.api.updateName(listId, listName, includeFilters, _options);
        return result.toPromise();
    }
}
exports.PromiseListsApi = PromiseListsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseMembershipsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableMembershipsApi(configuration, requestFactory, responseProcessor);
    }
    add(listId, requestBody, _options) {
        const result = this.api.add(listId, requestBody, _options);
        return result.toPromise();
    }
    addAllFromList(listId, sourceListId, _options) {
        const result = this.api.addAllFromList(listId, sourceListId, _options);
        return result.toPromise();
    }
    addAndRemove(listId, membershipChangeRequest, _options) {
        const result = this.api.addAndRemove(listId, membershipChangeRequest, _options);
        return result.toPromise();
    }
    getPage(listId, after, before, limit, _options) {
        const result = this.api.getPage(listId, after, before, limit, _options);
        return result.toPromise();
    }
    remove(listId, requestBody, _options) {
        const result = this.api.remove(listId, requestBody, _options);
        return result.toPromise();
    }
    removeAll(listId, _options) {
        const result = this.api.removeAll(listId, _options);
        return result.toPromise();
    }
}
exports.PromiseMembershipsApi = PromiseMembershipsApi;
//# sourceMappingURL=PromiseAPI.js.map