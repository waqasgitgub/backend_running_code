import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { CollectionResponseLong } from '../models/CollectionResponseLong';
import { ListCreateRequest } from '../models/ListCreateRequest';
import { ListCreateResponse } from '../models/ListCreateResponse';
import { ListFetchResponse } from '../models/ListFetchResponse';
import { ListFilterUpdateRequest } from '../models/ListFilterUpdateRequest';
import { ListSearchRequest } from '../models/ListSearchRequest';
import { ListSearchResponse } from '../models/ListSearchResponse';
import { ListUpdateResponse } from '../models/ListUpdateResponse';
import { ListsByIdResponse } from '../models/ListsByIdResponse';
import { MembershipChangeRequest } from '../models/MembershipChangeRequest';
import { MembershipsUpdateResponse } from '../models/MembershipsUpdateResponse';
import { ListsApiRequestFactory, ListsApiResponseProcessor } from "../apis/ListsApi";
export declare class ObservableListsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ListsApiRequestFactory, responseProcessor?: ListsApiResponseProcessor);
    create(listCreateRequest: ListCreateRequest, _options?: Configuration): Observable<ListCreateResponse>;
    doSearch(listSearchRequest: ListSearchRequest, _options?: Configuration): Observable<ListSearchResponse>;
    getAll(listIds?: Array<number>, includeFilters?: boolean, _options?: Configuration): Observable<ListsByIdResponse>;
    getById(listId: number, includeFilters?: boolean, _options?: Configuration): Observable<ListFetchResponse>;
    getByName(listName: string, objectTypeId: string, includeFilters?: boolean, _options?: Configuration): Observable<ListFetchResponse>;
    remove(listId: number, _options?: Configuration): Observable<void>;
    restore(listId: number, _options?: Configuration): Observable<void>;
    updateListFilters(listId: number, listFilterUpdateRequest: ListFilterUpdateRequest, enrollObjectsInWorkflows?: boolean, _options?: Configuration): Observable<ListUpdateResponse>;
    updateName(listId: number, listName?: string, includeFilters?: boolean, _options?: Configuration): Observable<ListUpdateResponse>;
}
import { MembershipsApiRequestFactory, MembershipsApiResponseProcessor } from "../apis/MembershipsApi";
export declare class ObservableMembershipsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MembershipsApiRequestFactory, responseProcessor?: MembershipsApiResponseProcessor);
    add(listId: number, requestBody: Array<number>, _options?: Configuration): Observable<MembershipsUpdateResponse>;
    addAllFromList(listId: number, sourceListId: number, _options?: Configuration): Observable<void>;
    addAndRemove(listId: number, membershipChangeRequest: MembershipChangeRequest, _options?: Configuration): Observable<MembershipsUpdateResponse>;
    getPage(listId: number, after?: string, before?: string, limit?: number, _options?: Configuration): Observable<CollectionResponseLong>;
    remove(listId: number, requestBody: Array<number>, _options?: Configuration): Observable<MembershipsUpdateResponse>;
    removeAll(listId: number, _options?: Configuration): Observable<void>;
}
