import { Configuration } from '../configuration';
import { CollectionResponseLong } from '../models/CollectionResponseLong';
import { ListCreateRequest } from '../models/ListCreateRequest';
import { ListCreateResponse } from '../models/ListCreateResponse';
import { ListFetchResponse } from '../models/ListFetchResponse';
import { ListFilterUpdateRequest } from '../models/ListFilterUpdateRequest';
import { ListSearchRequest } from '../models/ListSearchRequest';
import { ListSearchResponse } from '../models/ListSearchResponse';
import { ListUpdateResponse } from '../models/ListUpdateResponse';
import { ListsByIdResponse } from '../models/ListsByIdResponse';
import { MembershipChangeRequest } from '../models/MembershipChangeRequest';
import { MembershipsUpdateResponse } from '../models/MembershipsUpdateResponse';
import { ListsApiRequestFactory, ListsApiResponseProcessor } from "../apis/ListsApi";
export interface ListsApiCreateRequest {
    listCreateRequest: ListCreateRequest;
}
export interface ListsApiDoSearchRequest {
    listSearchRequest: ListSearchRequest;
}
export interface ListsApiGetAllRequest {
    listIds?: Array<number>;
    includeFilters?: boolean;
}
export interface ListsApiGetByIdRequest {
    listId: number;
    includeFilters?: boolean;
}
export interface ListsApiGetByNameRequest {
    listName: string;
    objectTypeId: string;
    includeFilters?: boolean;
}
export interface ListsApiRemoveRequest {
    listId: number;
}
export interface ListsApiRestoreRequest {
    listId: number;
}
export interface ListsApiUpdateListFiltersRequest {
    listId: number;
    listFilterUpdateRequest: ListFilterUpdateRequest;
    enrollObjectsInWorkflows?: boolean;
}
export interface ListsApiUpdateNameRequest {
    listId: number;
    listName?: string;
    includeFilters?: boolean;
}
export declare class ObjectListsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ListsApiRequestFactory, responseProcessor?: ListsApiResponseProcessor);
    create(param: ListsApiCreateRequest, options?: Configuration): Promise<ListCreateResponse>;
    doSearch(param: ListsApiDoSearchRequest, options?: Configuration): Promise<ListSearchResponse>;
    getAll(param?: ListsApiGetAllRequest, options?: Configuration): Promise<ListsByIdResponse>;
    getById(param: ListsApiGetByIdRequest, options?: Configuration): Promise<ListFetchResponse>;
    getByName(param: ListsApiGetByNameRequest, options?: Configuration): Promise<ListFetchResponse>;
    remove(param: ListsApiRemoveRequest, options?: Configuration): Promise<void>;
    restore(param: ListsApiRestoreRequest, options?: Configuration): Promise<void>;
    updateListFilters(param: ListsApiUpdateListFiltersRequest, options?: Configuration): Promise<ListUpdateResponse>;
    updateName(param: ListsApiUpdateNameRequest, options?: Configuration): Promise<ListUpdateResponse>;
}
import { MembershipsApiRequestFactory, MembershipsApiResponseProcessor } from "../apis/MembershipsApi";
export interface MembershipsApiAddRequest {
    listId: number;
    requestBody: Array<number>;
}
export interface MembershipsApiAddAllFromListRequest {
    listId: number;
    sourceListId: number;
}
export interface MembershipsApiAddAndRemoveRequest {
    listId: number;
    membershipChangeRequest: MembershipChangeRequest;
}
export interface MembershipsApiGetPageRequest {
    listId: number;
    after?: string;
    before?: string;
    limit?: number;
}
export interface MembershipsApiRemoveRequest {
    listId: number;
    requestBody: Array<number>;
}
export interface MembershipsApiRemoveAllRequest {
    listId: number;
}
export declare class ObjectMembershipsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MembershipsApiRequestFactory, responseProcessor?: MembershipsApiResponseProcessor);
    add(param: MembershipsApiAddRequest, options?: Configuration): Promise<MembershipsUpdateResponse>;
    addAllFromList(param: MembershipsApiAddAllFromListRequest, options?: Configuration): Promise<void>;
    addAndRemove(param: MembershipsApiAddAndRemoveRequest, options?: Configuration): Promise<MembershipsUpdateResponse>;
    getPage(param: MembershipsApiGetPageRequest, options?: Configuration): Promise<CollectionResponseLong>;
    remove(param: MembershipsApiRemoveRequest, options?: Configuration): Promise<MembershipsUpdateResponse>;
    removeAll(param: MembershipsApiRemoveAllRequest, options?: Configuration): Promise<void>;
}
