import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AbTestCreateRequestVNext } from '../models/AbTestCreateRequestVNext';
import { AbTestEndRequestVNext } from '../models/AbTestEndRequestVNext';
import { AbTestRerunRequestVNext } from '../models/AbTestRerunRequestVNext';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputPage } from '../models/BatchInputPage';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponsePage } from '../models/BatchResponsePage';
import { BatchResponsePageWithErrors } from '../models/BatchResponsePageWithErrors';
import { CollectionResponseWithTotalPageForwardPaging } from '../models/CollectionResponseWithTotalPageForwardPaging';
import { CollectionResponseWithTotalVersionPage } from '../models/CollectionResponseWithTotalVersionPage';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentLanguageCloneRequestVNext } from '../models/ContentLanguageCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { Page } from '../models/Page';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionPage } from '../models/VersionPage';
export declare class SitePagesApiRequestFactory extends BaseAPIRequestFactory {
    archive(objectId: string, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    archiveBatch(batchInputString: BatchInputString, _options?: Configuration): Promise<RequestContext>;
    attachToLangGroup(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Promise<RequestContext>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<RequestContext>;
    create(page: Page, _options?: Configuration): Promise<RequestContext>;
    createABTestVariation(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: Configuration): Promise<RequestContext>;
    createBatch(batchInputPage: BatchInputPage, _options?: Configuration): Promise<RequestContext>;
    createLangVariation(contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext, _options?: Configuration): Promise<RequestContext>;
    detachFromLangGroup(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Promise<RequestContext>;
    endActiveABTest(abTestEndRequestVNext: AbTestEndRequestVNext, _options?: Configuration): Promise<RequestContext>;
    getById(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<RequestContext>;
    getDraftById(objectId: string, _options?: Configuration): Promise<RequestContext>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<RequestContext>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<RequestContext>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    pushLive(objectId: string, _options?: Configuration): Promise<RequestContext>;
    readBatch(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    rerunPreviousABTest(abTestRerunRequestVNext: AbTestRerunRequestVNext, _options?: Configuration): Promise<RequestContext>;
    resetDraft(objectId: string, _options?: Configuration): Promise<RequestContext>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<RequestContext>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: Configuration): Promise<RequestContext>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<RequestContext>;
    setLangPrimary(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Promise<RequestContext>;
    update(objectId: string, page: Page, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    updateBatch(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    updateDraft(objectId: string, page: Page, _options?: Configuration): Promise<RequestContext>;
    updateLangs(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Promise<RequestContext>;
}
export declare class SitePagesApiResponseProcessor {
    archive(response: ResponseContext): Promise<void>;
    archiveBatch(response: ResponseContext): Promise<void>;
    attachToLangGroup(response: ResponseContext): Promise<void>;
    clone(response: ResponseContext): Promise<Page>;
    create(response: ResponseContext): Promise<void | Page>;
    createABTestVariation(response: ResponseContext): Promise<Page>;
    createBatch(response: ResponseContext): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    createLangVariation(response: ResponseContext): Promise<Page>;
    detachFromLangGroup(response: ResponseContext): Promise<void>;
    endActiveABTest(response: ResponseContext): Promise<void>;
    getById(response: ResponseContext): Promise<Page>;
    getDraftById(response: ResponseContext): Promise<Page>;
    getPage(response: ResponseContext): Promise<CollectionResponseWithTotalPageForwardPaging>;
    getPreviousVersion(response: ResponseContext): Promise<VersionPage>;
    getPreviousVersions(response: ResponseContext): Promise<CollectionResponseWithTotalVersionPage>;
    pushLive(response: ResponseContext): Promise<void>;
    readBatch(response: ResponseContext): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    rerunPreviousABTest(response: ResponseContext): Promise<void>;
    resetDraft(response: ResponseContext): Promise<void>;
    restorePreviousVersion(response: ResponseContext): Promise<Page>;
    restorePreviousVersionToDraft(response: ResponseContext): Promise<Page>;
    schedule(response: ResponseContext): Promise<void>;
    setLangPrimary(response: ResponseContext): Promise<void>;
    update(response: ResponseContext): Promise<Page>;
    updateBatch(response: ResponseContext): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    updateDraft(response: ResponseContext): Promise<Page>;
    updateLangs(response: ResponseContext): Promise<void>;
}
