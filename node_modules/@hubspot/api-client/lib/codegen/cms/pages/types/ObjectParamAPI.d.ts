import { Configuration } from '../configuration';
import { AbTestCreateRequestVNext } from '../models/AbTestCreateRequestVNext';
import { AbTestEndRequestVNext } from '../models/AbTestEndRequestVNext';
import { AbTestRerunRequestVNext } from '../models/AbTestRerunRequestVNext';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputContentFolder } from '../models/BatchInputContentFolder';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputPage } from '../models/BatchInputPage';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseContentFolder } from '../models/BatchResponseContentFolder';
import { BatchResponseContentFolderWithErrors } from '../models/BatchResponseContentFolderWithErrors';
import { BatchResponsePage } from '../models/BatchResponsePage';
import { BatchResponsePageWithErrors } from '../models/BatchResponsePageWithErrors';
import { CollectionResponseWithTotalContentFolderForwardPaging } from '../models/CollectionResponseWithTotalContentFolderForwardPaging';
import { CollectionResponseWithTotalPageForwardPaging } from '../models/CollectionResponseWithTotalPageForwardPaging';
import { CollectionResponseWithTotalVersionContentFolder } from '../models/CollectionResponseWithTotalVersionContentFolder';
import { CollectionResponseWithTotalVersionPage } from '../models/CollectionResponseWithTotalVersionPage';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentFolder } from '../models/ContentFolder';
import { ContentLanguageCloneRequestVNext } from '../models/ContentLanguageCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { Page } from '../models/Page';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionContentFolder } from '../models/VersionContentFolder';
import { VersionPage } from '../models/VersionPage';
import { LandingPagesApiRequestFactory, LandingPagesApiResponseProcessor } from "../apis/LandingPagesApi";
export interface LandingPagesApiArchiveRequest {
    objectId: string;
    archived?: boolean;
}
export interface LandingPagesApiArchiveBatchRequest {
    batchInputString: BatchInputString;
}
export interface LandingPagesApiArchiveFolderRequest {
    objectId: string;
    archived?: boolean;
}
export interface LandingPagesApiArchiveFoldersRequest {
    batchInputString: BatchInputString;
}
export interface LandingPagesApiAttachToLangGroupRequest {
    attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext;
}
export interface LandingPagesApiCloneRequest {
    contentCloneRequestVNext: ContentCloneRequestVNext;
}
export interface LandingPagesApiCreateRequest {
    page: Page;
}
export interface LandingPagesApiCreateABTestVariationRequest {
    abTestCreateRequestVNext: AbTestCreateRequestVNext;
}
export interface LandingPagesApiCreateBatchRequest {
    batchInputPage: BatchInputPage;
}
export interface LandingPagesApiCreateFolderRequest {
    contentFolder: ContentFolder;
}
export interface LandingPagesApiCreateFoldersRequest {
    batchInputContentFolder: BatchInputContentFolder;
}
export interface LandingPagesApiCreateLangVariationRequest {
    contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext;
}
export interface LandingPagesApiDetachFromLangGroupRequest {
    detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext;
}
export interface LandingPagesApiEndActiveABTestRequest {
    abTestEndRequestVNext: AbTestEndRequestVNext;
}
export interface LandingPagesApiGetByIdRequest {
    objectId: string;
    archived?: boolean;
    property?: string;
}
export interface LandingPagesApiGetDraftByIdRequest {
    objectId: string;
}
export interface LandingPagesApiGetFolderByIdRequest {
    objectId: string;
    archived?: boolean;
    property?: string;
}
export interface LandingPagesApiGetFolderPreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface LandingPagesApiGetFolderPreviousVersionsRequest {
    objectId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface LandingPagesApiGetFoldersPageRequest {
    createdAt?: Date;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAt?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    sort?: Array<string>;
    after?: string;
    limit?: number;
    archived?: boolean;
    property?: string;
}
export interface LandingPagesApiGetPageRequest {
    createdAt?: Date;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAt?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    sort?: Array<string>;
    after?: string;
    limit?: number;
    archived?: boolean;
    property?: string;
}
export interface LandingPagesApiGetPreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface LandingPagesApiGetPreviousVersionsRequest {
    objectId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface LandingPagesApiPushLiveRequest {
    objectId: string;
}
export interface LandingPagesApiReadBatchRequest {
    batchInputString: BatchInputString;
    archived?: boolean;
}
export interface LandingPagesApiReadFoldersRequest {
    batchInputString: BatchInputString;
    archived?: boolean;
}
export interface LandingPagesApiRerunPreviousABTestRequest {
    abTestRerunRequestVNext: AbTestRerunRequestVNext;
}
export interface LandingPagesApiResetDraftRequest {
    objectId: string;
}
export interface LandingPagesApiRestoreFolderPreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface LandingPagesApiRestorePreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface LandingPagesApiRestorePreviousVersionToDraftRequest {
    objectId: string;
    revisionId: number;
}
export interface LandingPagesApiScheduleRequest {
    contentScheduleRequestVNext: ContentScheduleRequestVNext;
}
export interface LandingPagesApiSetLangPrimaryRequest {
    setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext;
}
export interface LandingPagesApiUpdateRequest {
    objectId: string;
    page: Page;
    archived?: boolean;
}
export interface LandingPagesApiUpdateBatchRequest {
    batchInputJsonNode: BatchInputJsonNode;
    archived?: boolean;
}
export interface LandingPagesApiUpdateDraftRequest {
    objectId: string;
    page: Page;
}
export interface LandingPagesApiUpdateFolderRequest {
    objectId: string;
    contentFolder: ContentFolder;
    archived?: boolean;
}
export interface LandingPagesApiUpdateFoldersRequest {
    batchInputJsonNode: BatchInputJsonNode;
    archived?: boolean;
}
export interface LandingPagesApiUpdateLangsRequest {
    updateLanguagesRequestVNext: UpdateLanguagesRequestVNext;
}
export declare class ObjectLandingPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LandingPagesApiRequestFactory, responseProcessor?: LandingPagesApiResponseProcessor);
    archive(param: LandingPagesApiArchiveRequest, options?: Configuration): Promise<void>;
    archiveBatch(param: LandingPagesApiArchiveBatchRequest, options?: Configuration): Promise<void>;
    archiveFolder(param: LandingPagesApiArchiveFolderRequest, options?: Configuration): Promise<void>;
    archiveFolders(param: LandingPagesApiArchiveFoldersRequest, options?: Configuration): Promise<void>;
    attachToLangGroup(param: LandingPagesApiAttachToLangGroupRequest, options?: Configuration): Promise<void>;
    clone(param: LandingPagesApiCloneRequest, options?: Configuration): Promise<Page>;
    create(param: LandingPagesApiCreateRequest, options?: Configuration): Promise<void | Page>;
    createABTestVariation(param: LandingPagesApiCreateABTestVariationRequest, options?: Configuration): Promise<Page>;
    createBatch(param: LandingPagesApiCreateBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    createFolder(param: LandingPagesApiCreateFolderRequest, options?: Configuration): Promise<ContentFolder>;
    createFolders(param: LandingPagesApiCreateFoldersRequest, options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    createLangVariation(param: LandingPagesApiCreateLangVariationRequest, options?: Configuration): Promise<Page>;
    detachFromLangGroup(param: LandingPagesApiDetachFromLangGroupRequest, options?: Configuration): Promise<void>;
    endActiveABTest(param: LandingPagesApiEndActiveABTestRequest, options?: Configuration): Promise<void>;
    getById(param: LandingPagesApiGetByIdRequest, options?: Configuration): Promise<Page>;
    getDraftById(param: LandingPagesApiGetDraftByIdRequest, options?: Configuration): Promise<Page>;
    getFolderById(param: LandingPagesApiGetFolderByIdRequest, options?: Configuration): Promise<ContentFolder>;
    getFolderPreviousVersion(param: LandingPagesApiGetFolderPreviousVersionRequest, options?: Configuration): Promise<VersionContentFolder>;
    getFolderPreviousVersions(param: LandingPagesApiGetFolderPreviousVersionsRequest, options?: Configuration): Promise<CollectionResponseWithTotalVersionContentFolder>;
    getFoldersPage(param?: LandingPagesApiGetFoldersPageRequest, options?: Configuration): Promise<CollectionResponseWithTotalContentFolderForwardPaging>;
    getPage(param?: LandingPagesApiGetPageRequest, options?: Configuration): Promise<CollectionResponseWithTotalPageForwardPaging>;
    getPreviousVersion(param: LandingPagesApiGetPreviousVersionRequest, options?: Configuration): Promise<VersionPage>;
    getPreviousVersions(param: LandingPagesApiGetPreviousVersionsRequest, options?: Configuration): Promise<CollectionResponseWithTotalVersionPage>;
    pushLive(param: LandingPagesApiPushLiveRequest, options?: Configuration): Promise<void>;
    readBatch(param: LandingPagesApiReadBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    readFolders(param: LandingPagesApiReadFoldersRequest, options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    rerunPreviousABTest(param: LandingPagesApiRerunPreviousABTestRequest, options?: Configuration): Promise<void>;
    resetDraft(param: LandingPagesApiResetDraftRequest, options?: Configuration): Promise<void>;
    restoreFolderPreviousVersion(param: LandingPagesApiRestoreFolderPreviousVersionRequest, options?: Configuration): Promise<ContentFolder>;
    restorePreviousVersion(param: LandingPagesApiRestorePreviousVersionRequest, options?: Configuration): Promise<Page>;
    restorePreviousVersionToDraft(param: LandingPagesApiRestorePreviousVersionToDraftRequest, options?: Configuration): Promise<Page>;
    schedule(param: LandingPagesApiScheduleRequest, options?: Configuration): Promise<void>;
    setLangPrimary(param: LandingPagesApiSetLangPrimaryRequest, options?: Configuration): Promise<void>;
    update(param: LandingPagesApiUpdateRequest, options?: Configuration): Promise<Page>;
    updateBatch(param: LandingPagesApiUpdateBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    updateDraft(param: LandingPagesApiUpdateDraftRequest, options?: Configuration): Promise<Page>;
    updateFolder(param: LandingPagesApiUpdateFolderRequest, options?: Configuration): Promise<ContentFolder>;
    updateFolders(param: LandingPagesApiUpdateFoldersRequest, options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    updateLangs(param: LandingPagesApiUpdateLangsRequest, options?: Configuration): Promise<void>;
}
import { SitePagesApiRequestFactory, SitePagesApiResponseProcessor } from "../apis/SitePagesApi";
export interface SitePagesApiArchiveRequest {
    objectId: string;
    archived?: boolean;
}
export interface SitePagesApiArchiveBatchRequest {
    batchInputString: BatchInputString;
}
export interface SitePagesApiAttachToLangGroupRequest {
    attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext;
}
export interface SitePagesApiCloneRequest {
    contentCloneRequestVNext: ContentCloneRequestVNext;
}
export interface SitePagesApiCreateRequest {
    page: Page;
}
export interface SitePagesApiCreateABTestVariationRequest {
    abTestCreateRequestVNext: AbTestCreateRequestVNext;
}
export interface SitePagesApiCreateBatchRequest {
    batchInputPage: BatchInputPage;
}
export interface SitePagesApiCreateLangVariationRequest {
    contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext;
}
export interface SitePagesApiDetachFromLangGroupRequest {
    detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext;
}
export interface SitePagesApiEndActiveABTestRequest {
    abTestEndRequestVNext: AbTestEndRequestVNext;
}
export interface SitePagesApiGetByIdRequest {
    objectId: string;
    archived?: boolean;
    property?: string;
}
export interface SitePagesApiGetDraftByIdRequest {
    objectId: string;
}
export interface SitePagesApiGetPageRequest {
    createdAt?: Date;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAt?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    sort?: Array<string>;
    after?: string;
    limit?: number;
    archived?: boolean;
    property?: string;
}
export interface SitePagesApiGetPreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface SitePagesApiGetPreviousVersionsRequest {
    objectId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface SitePagesApiPushLiveRequest {
    objectId: string;
}
export interface SitePagesApiReadBatchRequest {
    batchInputString: BatchInputString;
    archived?: boolean;
}
export interface SitePagesApiRerunPreviousABTestRequest {
    abTestRerunRequestVNext: AbTestRerunRequestVNext;
}
export interface SitePagesApiResetDraftRequest {
    objectId: string;
}
export interface SitePagesApiRestorePreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface SitePagesApiRestorePreviousVersionToDraftRequest {
    objectId: string;
    revisionId: number;
}
export interface SitePagesApiScheduleRequest {
    contentScheduleRequestVNext: ContentScheduleRequestVNext;
}
export interface SitePagesApiSetLangPrimaryRequest {
    setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext;
}
export interface SitePagesApiUpdateRequest {
    objectId: string;
    page: Page;
    archived?: boolean;
}
export interface SitePagesApiUpdateBatchRequest {
    batchInputJsonNode: BatchInputJsonNode;
    archived?: boolean;
}
export interface SitePagesApiUpdateDraftRequest {
    objectId: string;
    page: Page;
}
export interface SitePagesApiUpdateLangsRequest {
    updateLanguagesRequestVNext: UpdateLanguagesRequestVNext;
}
export declare class ObjectSitePagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SitePagesApiRequestFactory, responseProcessor?: SitePagesApiResponseProcessor);
    archive(param: SitePagesApiArchiveRequest, options?: Configuration): Promise<void>;
    archiveBatch(param: SitePagesApiArchiveBatchRequest, options?: Configuration): Promise<void>;
    attachToLangGroup(param: SitePagesApiAttachToLangGroupRequest, options?: Configuration): Promise<void>;
    clone(param: SitePagesApiCloneRequest, options?: Configuration): Promise<Page>;
    create(param: SitePagesApiCreateRequest, options?: Configuration): Promise<void | Page>;
    createABTestVariation(param: SitePagesApiCreateABTestVariationRequest, options?: Configuration): Promise<Page>;
    createBatch(param: SitePagesApiCreateBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    createLangVariation(param: SitePagesApiCreateLangVariationRequest, options?: Configuration): Promise<Page>;
    detachFromLangGroup(param: SitePagesApiDetachFromLangGroupRequest, options?: Configuration): Promise<void>;
    endActiveABTest(param: SitePagesApiEndActiveABTestRequest, options?: Configuration): Promise<void>;
    getById(param: SitePagesApiGetByIdRequest, options?: Configuration): Promise<Page>;
    getDraftById(param: SitePagesApiGetDraftByIdRequest, options?: Configuration): Promise<Page>;
    getPage(param?: SitePagesApiGetPageRequest, options?: Configuration): Promise<CollectionResponseWithTotalPageForwardPaging>;
    getPreviousVersion(param: SitePagesApiGetPreviousVersionRequest, options?: Configuration): Promise<VersionPage>;
    getPreviousVersions(param: SitePagesApiGetPreviousVersionsRequest, options?: Configuration): Promise<CollectionResponseWithTotalVersionPage>;
    pushLive(param: SitePagesApiPushLiveRequest, options?: Configuration): Promise<void>;
    readBatch(param: SitePagesApiReadBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    rerunPreviousABTest(param: SitePagesApiRerunPreviousABTestRequest, options?: Configuration): Promise<void>;
    resetDraft(param: SitePagesApiResetDraftRequest, options?: Configuration): Promise<void>;
    restorePreviousVersion(param: SitePagesApiRestorePreviousVersionRequest, options?: Configuration): Promise<Page>;
    restorePreviousVersionToDraft(param: SitePagesApiRestorePreviousVersionToDraftRequest, options?: Configuration): Promise<Page>;
    schedule(param: SitePagesApiScheduleRequest, options?: Configuration): Promise<void>;
    setLangPrimary(param: SitePagesApiSetLangPrimaryRequest, options?: Configuration): Promise<void>;
    update(param: SitePagesApiUpdateRequest, options?: Configuration): Promise<Page>;
    updateBatch(param: SitePagesApiUpdateBatchRequest, options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    updateDraft(param: SitePagesApiUpdateDraftRequest, options?: Configuration): Promise<Page>;
    updateLangs(param: SitePagesApiUpdateLangsRequest, options?: Configuration): Promise<void>;
}
